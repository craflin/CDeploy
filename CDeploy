
function(deploy_package package version repository)
    if(MSVC)
        foreach(config ${CMAKE_CONFIGURATION_TYPES})
            if(NOT "${config}" STREQUAL "Debug")
                string(TOUPPER "${config}" config_upper)
                set(CMAKE_MAP_IMPORTED_CONFIG_${config_upper} Release)
            endif()
        endforeach()
    endif()
    find_package(${package} ${version} EXACT QUIET CONFIG)
    if(NOT ${package}_FOUND)

        set(url "${repository}/${package}-${version}-${CDEPLOY_OS}-${CDEPLOY_ARCH}-${CDEPLOY_COMPILER}.zip")
        message("-- Downloading ${url}")
        get_filename_component(_filename "${url}" NAME)
        file(DOWNLOAD "${url}" "${CMAKE_BINARY_DIR}/${_filename}" STATUS download_status)
        list(GET download_status 0 _download_result)
        if(NOT ${_download_result} EQUAL 0)
            list(GET download_status 1 _download_error)
            message(FATAL_ERROR "Could not download: ${_download_error} (${_download_result})")
            return()
        endif()

        execute_process(COMMAND ${CMAKE_COMMAND} -E tar tf "${CMAKE_BINARY_DIR}/${_filename}"
                        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
                        OUTPUT_VARIABLE _unzip_output
                        RESULT_VARIABLE _unzip_result)
        if(NOT ${_unzip_result} EQUAL 0)
            message(FATAL_ERROR "Could not extract file")
            return()
        endif()
        string(REGEX REPLACE "([^/]+).*" "\\1" _extract_dir "${_unzip_output}")

        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/${_filename}"
                        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
                        RESULT_VARIABLE _unzip_result)
        if(NOT ${_unzip_result} EQUAL 0)
            message(FATAL_ERROR "Could not extract file")
            return()
        endif()
        
        set(package_folder "${CMAKE_BINARY_DIR}/${_extract_dir}")

        find_package(${package} ${version} EXACT QUIET CONFIG REQUIRED
            PATHS "${package_folder}"
        )

    endif()
endfunction()

function(get_target_arch var)
    set(${var} ${CMAKE_SYSTEM_PROCESSOR})
    if(WIN32)
        if(MSVC)
            if(CMAKE_CL_64)
                set(${var} x64)
            else()
                set(${var} x86)
            endif()
        elseif(CMAKE_COMPILER_IS_GNUCC) # CMAKE_CXX_COMPILER_ARCHITECTURE_ID does not provide anything with MinGW compilers
            execute_process(COMMAND "${CMAKE_CXX_COMPILER}" -v OUTPUT_VARIABLE GCC_VERSION_OUTPUT ERROR_VARIABLE GCC_VERSION_OUTPUT)
            if(GCC_VERSION_OUTPUT MATCHES ".*x86_64.*")
                set(${var} x64)
            else()
                set(${var} x86)
            endif()
        endif()
    endif()
    set(${var} ${${var}} PARENT_SCOPE)
endfunction()

function(get_target_compiler var)
    if(CMAKE_COMPILER_IS_GNUCC)
        string(REGEX REPLACE "([0-9]+\\.[0-9]+).*" "gcc\\1" ${var} "${CMAKE_CXX_COMPILER_VERSION}")
    elseif(MSVC)
        set(MSVC_YEARS 2008 2010 2012 2013 2015 2017)
        set(MSVC_MSC_VERS 1500 1600 1700 1800 1900 1910)
        list(FIND MSVC_MSC_VERS ${MSVC_VERSION} MSVC_INDEX)
        list(GET MSVC_YEARS ${MSVC_INDEX} MSVS_YEAR)
        set(${var} vs${MSVS_YEAR})
    else()
        set(${var} ${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION})
    endif()
    set(${var} ${${var}} PARENT_SCOPE)
endfunction()

function(get_target_os var)
    if(WIN32)
        set(${var} windows)
    else()
        file(GLOB ETC_RELEASE_FILES /etc/*-release)
        list(REMOVE_ITEM  ETC_RELEASE_FILES /etc/lsb-release)
        list(GET ETC_RELEASE_FILES 0 ETC_RELEASE_FILE)
        file(READ "${ETC_RELEASE_FILE}" ETC_RELEASE_FILE_CONTENT)
        string(REGEX REPLACE "=|\n" ";" ETC_RELEASE_FILE_CONTENT "${ETC_RELEASE_FILE_CONTENT}")
        string(REGEX REPLACE "; +| +;" ";" ETC_RELEASE_FILE_CONTENT "${ETC_RELEASE_FILE_CONTENT}")
        list(FIND ETC_RELEASE_FILE_CONTENT "NAME" NAME_INDEX)
        if(NAME_INDEX GREATER -1)
            math(EXPR NAME_INDEX "${NAME_INDEX} + 1")
            list(GET ETC_RELEASE_FILE_CONTENT "${NAME_INDEX}" ETC_RELEASE_NAME)
        else()
            list(GET ETC_RELEASE_FILE_CONTENT 0 ETC_RELEASE_NAME)
        endif()
        string(REGEX MATCH "[^ \"]+" ETC_RELEASE_NAME "${ETC_RELEASE_NAME}")
        list(FIND ETC_RELEASE_FILE_CONTENT "VERSION_ID" VERSION_INDEX)
        if(NOT VERSION_INDEX GREATER -1)
            list(FIND ETC_RELEASE_FILE_CONTENT "VERSION" VERSION_INDEX)
        endif()
        if(VERSION_INDEX GREATER -1)
            math(EXPR VERSION_INDEX "${VERSION_INDEX} + 1")
            list(GET ETC_RELEASE_FILE_CONTENT "${VERSION_INDEX}" ETC_RELEASE_VERSION)
            string(REGEX MATCH "[^ \"]+" ETC_RELEASE_VERSION "${ETC_RELEASE_VERSION}")
        endif()
        string(TOLOWER "${ETC_RELEASE_NAME}${ETC_RELEASE_VERSION}" ${var})
    endif()
    set(${var} ${${var}} PARENT_SCOPE)
endfunction()

get_target_arch(CDEPLOY_ARCH)
get_target_compiler(CDEPLOY_COMPILER)
get_target_os(CDEPLOY_OS)

set(CPACK_GENERATOR "ZIP")
set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}-${CDEPLOY_OS}-${CDEPLOY_ARCH}-${CDEPLOY_COMPILER}")
